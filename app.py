import streamlit as st
import pandas as pd
import requests
import plotly.express as px

st.set_page_config(page_title="An√°lisis Demogr√°fico Mundial", layout="wide")
st.title("üåç Dashboard Demogr√°fico Mundial")
st.markdown("Visualiza y compara datos demogr√°ficos de todos los pa√≠ses usando la API p√∫blica [REST Countries](https://restcountries.com).")

# Cargar datos de la API REST Countries
@st.cache_data
def load_country_data():
    url = "https://restcountries.com/v3.1/all"
    response = requests.get(url)
    data = response.json()
    
    # Extraer datos relevantes
    country_data = []
    for country in data:
        try:
            name = country['name']['common']
            population = country.get('population', 0)
            area = country.get('area', None)
            region = country.get('region', 'Unknown')
            subregion = country.get('subregion', 'Unknown')
            density = population / area if area else None

            country_data.append({
                'Pa√≠s': name,
                'Poblaci√≥n': population,
                '√Årea (km¬≤)': area,
                'Regi√≥n': region,
                'Subregi√≥n': subregion,
                'Densidad Poblacional': density
            })
        except Exception as e:
            continue
    
    return pd.DataFrame(country_data)

df = load_country_data()

# Sidebar para filtros
st.sidebar.header("Filtros Demogr√°ficos")
regiones = sorted(df['Regi√≥n'].dropna().unique())
region_seleccionada = st.sidebar.multiselect("Selecciona regi√≥n(es):", regiones, default=regiones)

df_filtrado = df[df['Regi√≥n'].isin(region_seleccionada)]

# Mostrar tabla resumida
st.subheader("üìã Datos por pa√≠s")
st.dataframe(df_filtrado.sort_values("Poblaci√≥n", ascending=False), use_container_width=True)

# Gr√°fico de poblaci√≥n por pa√≠s
st.subheader("üë• Poblaci√≥n Total por Pa√≠s")
fig1 = px.bar(df_filtrado.sort_values("Poblaci√≥n", ascending=False).head(20),
              x='Pa√≠s', y='Poblaci√≥n', color='Regi√≥n',
              title='Top 20 pa√≠ses por poblaci√≥n',
              labels={'Poblaci√≥n': 'Habitantes'})
st.plotly_chart(fig1, use_container_width=True)

# Gr√°fico de densidad poblacional
st.subheader("üèòÔ∏è Densidad Poblacional por Pa√≠s")
top_density = df_filtrado[df_filtrado['Densidad Poblacional'].notnull()].sort_values("Densidad Poblacional", ascending=False).head(20)
fig2 = px.bar(top_density, x='Pa√≠s', y='Densidad Poblacional', color='Regi√≥n',
              title='Top 20 pa√≠ses por densidad poblacional',
              labels={'Densidad Poblacional': 'Habitantes por km¬≤'})
st.plotly_chart(fig2, use_container_width=True)

st.caption("Fuente de datos: [REST Countries API](https://restcountries.com)")
